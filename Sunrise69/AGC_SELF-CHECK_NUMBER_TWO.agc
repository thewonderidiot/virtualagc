### FILE="Main.annotation"
## Copyright:	Public domain.
## Filename:	AGC_SELF-CHECK.agc
## Purpose:	Part of the source code for Solarium build 55. This
##		is for the Command Module's (CM) Apollo Guidance
##		Computer (AGC), for Apollo 6.
## Assembler:	yaYUL --block1
## Contact:	Jim Lawton <jim DOT lawton AT gmail DOT com>
## Website:	www.ibiblio.org/apollo/index.html
## Mod history:	2009-10-03 JL	Created.
##		2016-08-19 RSB	Typos.
##		2016-08-23 RSB	More of the same.
## 		2016-12-28 RSB	Proofed comment text using octopus/ProoferComments,
##				and fixed errors found.


		SETLOC	14000

# NEXT THREE CONSTANTS ARE USED IN RUPTCHK SUBROUTINE
OVCON		OCTAL	37767
TM1WAIT		OCTAL	00320
ZRUPTCON	ADRES	TSKADRS		# MUST BE ADDRESS OF TSKADRS

# NEXT SIX CONSTANTS ARE USED IN ERASCHK, CNTRCHK, AND CYCLSHF SUBROUTINES
CONCNTR1	EQUALS	BIT5		# 00020
CONERAS1	OCTAL	00060
CONERAS2	OCTAL	01774
CONC+S1		OCTAL	25252
CONC+S2		EQUALS	CSQ		# 40001

# THE FOLLOWING CONSTANTS ARE USED THROUGHOUT SELF-CHECK
S2CON0		EQUALS	ZERO		# +0
S2CON1		EQUALS	BIT1		# +1
S2CON2		EQUALS	BIT2		# +2
S2CON4		EQUALS	BIT3		# +4
S2CON64		EQUALS	BIT7		# 00100
S2CON1/4	EQUALS	BIT13		# 10000
S2CON1/2	EQUALS	BIT14		# 20000
S2CON+MX	EQUALS	POSMAX		# 37777
S2CON-2		EQUALS	MINUS2		# 77775
S2CON-1		EQUALS	MINUS1		# 77776
S2CONMAX	EQUALS	NEG0		# 77777

 -2		XCH	QADRS		# ENTRY HERE FROM -ZEROCHK AND -ONECHK
		TC	+2

ERRORS2		XCH	Q		# FAILURE DETECTED - ALARM.
		TS	S2FAIL		# SAVE CALLING Q FOR POSSIBLE FAILURE LOC.
		TC	ALARM
		OCT	01102
		XCH	ER2COUNT	# ADD +1 TO ER2COUNT REGISTER EVERY TIME
		AD	S2CON1		# THERE IS AN ERROR IN SELF-CHECK
		XCH	ER2COUNT
		TC	CCSCHK2		# START    SELF-CHECK AGAIN
		
-ZEROCHK	XCH	Q
		TS	QADRS		# HOLDS ADDRESS THAT WAS IN Q REGISTER
		XCH	Q
		CCS	A
		TC	ERRORS2 -2
		TC	ERRORS2 -2
		TC	ERRORS2 -2
		TC	Q



		CS	A
-ONECHK		XCH	Q
		TS	QADRS		# HOLDS ADDRESS THAT WAS IN Q REGISTER
		XCH	Q
		CCS	A
		TC	ERRORS2 -2
		TC	ERRORS2 -2
		CCS	A
		TC	ERRORS2 -2
		TC	Q

## MAS 2023: This label, at address 06,6042, appears to be the entry point
## to AGC SELF-CHECK NUMBER TWO.
STRTSLF2	CAF	S2CON0
		TS	ER2COUNT
		TS	S2COUNT
		TS	S2COUNT +1
		TS	S2COUNT +2

		CS	TWO
		INHINT
		MASK	OUT1
		TS	OUT1
		RELINT

# CHECKS MOST CCS PULSES
CCSCHK2		CS	S2CON2		# -2
		CCS	A		# C(A) = -2
		TC	ERRORS2
		TC	ERRORS2
		TC	+2
		TC	ERRORS2
		CCS	A		# C(A) = +1, RESULT OF CCS -NUMBER
		TC	+4
		TC	ERRORS2
		TC	ERRORS2
		TC	ERRORS2
		CCS	A		# C(A) = +0, RESULT OF CCS + NUMBER
		TC	ERRORS2
		TC	+3
		TC	ERRORS2
		TC	ERRORS2
		CS	A
		CCS	A		# C(A) = -0, RESULT OF CCS +0
		TC	ERRORS2
		TC	ERRORS2
		TC	ERRORS2
		CCS	A		# RESULT OF CCS -0
		TC	ERRORS2
		TC	+3
		TC	ERRORS2
		TC	ERRORS2
# SPECIFICALLY CHECKS RSC PULSE OF TC INSTRUCTION (ALSO MOST OF TC
# PULSES)
		TC	+2
		TC	+2		# NEXT SUBROUTINE
		TC	Q

# CHECKS WP, GP, TP - WP2, RP2 - RG, WP, OF CCS1
# CHECKS RB, WG PULSES (READ BACK INTO ERASABLE)
PTY+ERS2	CAF	5777		# 47777
		TS	S2KEEP1
		MASK	S2KEEP1
		XCH	S2KEEP1
		AD	S2KEEP1
		INDEX	5777
		4	S2KEEP1		# MP SKEEP1
		INDEX	5777
		5	S2KEEP1		# DV SKEEP1
		CS	S2KEEP1
		TS	S2KEEP2		# 30000
		INDEX	S2KEEP1		# TROUBLE IF C(SKEEP1) NOT 47777
		6	S2KEEP2		# SU SKEEP2, C(A) = -0
		TS	S2KEEP2		# -0
		CCS	S2KEEP2
		TC	ERRORS2
		TC	ERRORS2
		TC	ERRORS2
		CCS	S2KEEP2
		TC	ERRORS2
		TC	ERRORS2
		TC	ERRORS2		
# START ERASABLE INSTRUCTION CHECK
		CAF	E2INST1
		TS	S2KEEP1
		CAF	E2INST2
		TS	S2KEEP2
		CAF	E2INST3
		TS	S2KEEP3
		CAF	E2INST4
		TS	S2KEEP4
		CAF	E2INST5
		TS	S2KEEP5
		CAF	E2INST6
		TS	S2KEEP6
		CAF	S2CON1/2
		TC	S2KEEP1
E2INST1		INDEX	5777
E2INST2		4	S2CON2		# MP, C(A) = +1, THEN +0
E2INST3		AD	A		# CHECKS ST2 PARITY
E2INST4		CCS	A
E2INST5		TC	S2KEEP1
E2INST6		TC	+1		# NEXT SUBROUTINE



# CHECKS RSC, WSC PULSES
# NO WSC PULSE IN MASK INSTRUCTION
SCCHK2		CAF	S2CON64		# 00100
		XCH	LP		# 00040
		XCH	LP
		TS	LP		# 00020
		AD	LP		# 00010
		INDEX	LP		# 00004
		2	5767		# INDEX 5777
		6	0003		# SU LP, 00002
# NEXT 4 INSTRUCTIONS CHECK RSC PULSE IN MASK INSTRUCTION
		CS	LP		# C(A) = -2, C(LP) = +1
		MASK	LP		# C(A) = +1, C(LP) = +1
		CS	A
		TC	-ONECHK
		CCS	LP
		TC	+4
		TC	ERRORS2
		TC	ERRORS2
		TC	ERRORS2
		CCS	LP
		TC	ERRORS2
		TC	ERRORS2
		TC	+2
		TC	ERRORS2
		CCS	LP
		TC	ERRORS2
		TC	+3		# NEXT SUBROUTINE
		TC	ERRORS2
		TC	ERRORS2
# CHECKS MOST OF MP PULSES
MPCHK2		CAF	S2CON4
		TS	LP
MP++2		CAF	S2CON+MX
		INDEX	5777
		4	LP		# C(A) = +1, CHECKS RSC PULSE
		AD	LP		# C(LP) = +37776
		TS	S2KEEP1		# 37777
MP+-2		CAF	S2CON+MX
		INDEX	5777
		4	S2CON-2
		AD	LP		# C(LP) = -37776
		AD	S2KEEP1
		TC	-ZEROCHK
MP--2		CS	S2CON+MX
		INDEX	5777
		4	S2CON-2		# C(A) = +1
		AD	LP		# C(LP) = +37776
		TS	S2KEEP1		# 37777
MP-+2		CS	S2CON+MX
		INDEX	5777
		4	S2CON2		# C(A) = -1
		AD	LP		# C(LP) = -37776
		AD	S2KEEP1
		TC	-ZEROCHK


# CHECKS MOST OF SU PULSES
SUCHK2		CAF	S2CON+MX
		INDEX	5777
		6	S2CONSU		# SU 37776, C(A) = +1
		TC	-ONECHK -1

# CHECKS MOST OF DV PULSES (ALL EXCEPT WP, GP, TP)
# DIVIDE USES ST2
# ++ AND --, C(A) = 25252, C(Q) = 67777, C(LP) = +1
# +- AND -+ , C(A) = 52525, C(Q) = 67777, C(LP) = 40000 AND 40001
DVCHK2		CAF	S2CON3/8
		TS	Q
DV++2		CAF	S2CON1/4
		INDEX	5777
		5	Q		# C(A) = 25252, CHECKS RSC PULSE
		TS	S2KEEP1
		XCH	LP
		TS	S2KEEP2
DV+-2		CS	Q		# +1/4
		INDEX	5777
		5	S2CN-3/8	# C(A) = 52525
		AD	S2KEEP1		# C(A) = -0
		TS	S2KEEP5		# SHOULD BE -0
		XCH	LP
		TS	S2KEEP3
DV--2		XCH	Q		# -1/4
		INDEX	5777
		5	S2CN-3/8	# C(A) = 25252
		TS	S2KEEP1
		XCH	LP
		TS	S2KEEP4
DV-+2		XCH	Q		# -1/4
		INDEX	5777
		5	S2CON3/8
		AD	S2KEEP1		# C(A) = -0
		TS	S2KEEP1
		CS	LP		# C(A) = 37776
		AD	S2KEEP1		# C(A) = 37776
		AD	S2KEEP2		# C(A) = 37777
		AD	S2KEEP3		# C(A) = -0
		AD	S2KEEP4		# C(A) = +1
		AD	S2KEEP5		# C(A) = +1
		TC	-ONECHK -1


# CHECKS MOST TS PULSES
# CHECKS ALL OF PINC AND MINC PULSES EXCEPT WOVR
TS+-CHK2	CAF	S2CON1
		TS	OVCTR
		AD	S2CON+MX	# C(A) = + WITH OVERFLOW
		TS	S2KEEP1
		TC	ERRORS2
		AD	S2KEEP1		# C(A) = +1
		AD	OVCTR		# C(A) = +3
		TS	OVCTR
		CS	A		# C(A) = 77774
		INDEX	5777
		6	S2CONTS		# C(A) =  -0 WITH UNDERFLOW
		TS	S2KEEP1
		TC	ERRORS2
		AD	S2KEEP1		# C(A) = -1
		AD	OVCTR		# C(A) = -1+2
		TC	-ONECHK -1

# NOT POSSIBLE TO CHECK WOVI PULSE IN NXI1
# START WOVI PULSE CHECK AND INHINT RELINT CHECK
RUPTCHK		INDEX	INHINT
		CAF	S2CON0
		TS	0024		# ZRUPT
		INDEX	RELINT
		AD	TIME1
		TS	S2KEEP1
TENMS		CS	S2KEEP1		# CHECK FOR NEXT PULSE TP TIME1
		AD	TIME1
		CCS	A
		CCS	A
		TC	RUPTCHK		# START AGAIN, TIMING IS OFF DUE TO RUPT
		TC	+2		# 10 MS PULSE HAS ARRIVED AT TIME1
		TC	TENMS
		CAF	TM1WAIT		# START 7 TO 8 MS WAIT
7-8WAIT		CCS	A
		TC	7-8WAIT
		INDEX	INHINT
		CCS	0024		# ZRUPT
		TC	RUPTCHK		# THERE WAS AN INTERRUPT, START AGAIN
		CAF	S2CON1
		TC	WAITLIST
		CADR	TSKADRS
		XCH	S2CON+MX
		AD	OVCON		# WILL STAY IN OVERFLOW, UNDERFLOW FOR
		INDEX	RELINT		# APPROXIMATELY 3 MS
WAIT1		CCS	A
		AD	S2CON2
		TC	+2
		TC	WOVIRPT
		INDEX	5777
		6	S2CONMAX		# SU -0
		XCH	A
		INDEX	S2CON0
		CS	A
		MASK	A
		CS	A
		TS	A
		TC	ERRORS2
		TC	WAIT1
WOVIRPT		INDEX	INHINT
		TS	S2KEEP1
S2CONTS		OCTAL	37775
		INDEX	RELINT
# INTERRUPT SHOULD APPEAR BEFORE NEXT INSTRUCTION
		TC	SOPTION1	# END OF PULSES CHECK
TSKADRS		CS	0024		# C(ZRUPT) = ADDRESS OF TSKADRS
		AD	ZRUPTCON
		TC	-ZEROCHK
		XCH	S2COUNT		# ADD +1 TO S2COUNT REGISTER AT THIS
		AD	S2CON1		# POINT OF SELF-CHECK.
		XCH	S2COUNT
		TC	TASKOVER


SOPTION1	CCS	S2MODE		# 3 OPTIONS OF SELF-CHECK
		TC	S2MODECK	# END OF PULSES ONLY CHECK
		TC	S2MODECK
		TC	+1		# CONTINUE IF C(S2MODE) IS A NEG. NUMB5R

# COUNTS DOWN 15 BIT NUMBER (APPROXIMATELY 10 SECONDS)
COUNTCHK	CS	S2CON+MX
		TS	S2KEEP5
COUNTS		TS	Q
		CCS	Q
		TC	-NMBR
S2CONSU		OCTAL	37776
		TC	+2
		TC	OFCOUNT
		AD	S2KEEP5
		TC	-ONECHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CS	S2KEEP5
		AD	S2CONMAX		# -0
		TS	S2KEEP4
		TC	COUNTS
-NMBR		CS	A
		TS	S2KEEP5
		AD	S2KEEP4
		TC	-ONECHK -1
		CS	S2KEEP5
		CS	A
		TC	COUNTS

# COUNTS DOWN OVERFLOW NUMBER (APPROXIMATELY 3.5 SECONDS)
OFCOUNT		TS	S2KEEP7		# +0
		CAF	S2CON+MX
		AD	A
COUNTSOF	AD	S2CON1
		INHINT
		XCH	Q
		CCS	Q
		TS	S2KEEP6
		TC	ENDOF
		RELINT
		AD	S2KEEP7
		TS	S2KEEP7
		TC	+2
		TC	ERRORS2
		CCS	NEWJOB
		TC	DUMEXIT2
		CAF	S2CON+MX
		AD	S2KEEP6
		TC	COUNTSOF
ENDOF		CS	A
		RELINT
		AD	S2KEEP7
		TC	-ZEROCHK

# REGISTER 1777 ALWAYS HOLDS LOWEST (X-1) ADDRESS JUST CHECKED
# REGISTER 1776 HOLDS BEFORE CONTENTS OF X
# REGISTER 1775 HOLDS BEFORE CONTENTS OF X-1
# REGISTER 1774 IS STARTING ADDRESS
# PUTS OWN ADDRESS IN REGISTERS OCT 1774 THROUGH OCT 60 (APPROX.  1.2 SEC)
ERASCHK		CAF	CONERAS2	# 01774
		TS	1777
ERASLOOP	CS	1777
		RELINT
		CS	0000
		INHINT
		NDX	0000
		XCH	0000
		TS	1776		# PUT C(X) IN 1776
		CCS	1777
		TS	1777
		NDX	0000
		XCH	0000
		XCH	1775		# PUT C(X-1) IN 1775
		INDEX	1777
		CS	0001
		INDEX	1777
		AD	0000
		TC	-ONECHK
COMPLMNT	CS	1777
		INDEX	1777
		TS	0000		# PUTS COMPLEMENT OF ADDRESS IN X-1
		AD	S2CON-1
		INDEX	1777
		TS	0001		# PUTS COMPLEMENT OF ADDRESS IN X
		INDEX	1777
		CS	0000
		INDEX	1777
		AD	0001
		TC	-ONECHK
		XCH	1776
		NDX	1777
		TS	0001		# RESTORE C(X)
		CS	1775
		CS	A
		NDX	1777
		TS	0000		# RESTORE C(X-1)
		CCS	NEWJOB
		TC	DUMEXIT2
ENDERAS		CS	1777
		AD	CONERAS1	# +60 OCT
		CCS	A
S2CON3/8	OCTAL	14000
S2CN-3/8	OCTAL	63777
		TC	ERASLOOP
		INDEX	RELINT

# CS ALL REGISTERS FROM OCT 57 THROUGH OCT 20
# ALL COUNTERS, PLUS 4 SPARES, PLUS 4 RUPT REGISTERS.
# PLUS CYCLE AND SHIFT REGISTERS
CNTRCHK		CAF	LOW5
CNTRLOOP	TS	S2KEEP1
		AD	CONCNTR1	# +20 OCT
		INDEX	A
		CS	0000
		CCS	S2KEEP1
		TC	CNTRLOOP

CYCLSHFT	CAF	CONC+S1
		TS	CYR		# C(CYR) = 12525
		TS	CYL		# C(CYL) = 52524
		TS	SR		# C(SR) = 12525
		TS	SL		# C(SL) = 12524
		AD	CYR
		AD	CYL
		AD	SR
		AD	SL
		AD	CONC+S2		# C(A) = -1
		TC	-ONECHK
		
		XCH	S2COUNT +1	# ADD +1 TO S2COUNT +1 REGISTER AT THIS
		AD	S2CON1		# POINT OF SELF-CHECK
		XCH	S2COUNT +1
SOPTION2	CCS	S2MODE		# TWO OPTIONS LEFT
		TC	COUNTCHK
		TC	S2MODECK
		TC	S2MODECK	# END OF PULSES + SC + ERASABLE CHECK

# MULTIPLY SUBROUTINES TAKE APPROXIMATELY 30 SECONDS
# (37777) X (37777 THROUGH 00001)
# C(A) COUNTS DOWN. C(LP) COUNTS UP.
MPNMBRS		CAF	S2CON+MX
		TS	S2KEEP2
		CAF	S2CON+MX
		EXTEND
		MP	S2KEEP2
		AD	LP		# C(A) = 37777
		CS	A
		AD	S2CON+MX
		TC	-ZEROCHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CCS	S2KEEP2
		TS	S2KEEP2
		CCS	S2KEEP2
		TC	MPNMBRS +2
# (-1) X (37777 THROUGH 00001)
		CAF	S2CON+MX
		TS	S2KEEP2
MPHIGH1		CAF	S2CON-1
		EXTEND
		MP	S2KEEP2		# C(A) = -0
		AD	LP
		AD	S2KEEP2
		TC	-ZEROCHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CCS	S2KEEP2
		TS	S2KEEP2
		CCS	S2KEEP2
		TC	MPHIGH1

# INTERCHANGE MULTIPLIER AND MULTIPLICAND
# (37777 THROUGH 00001) X (37777)
# C(A) COUNTS DOWN. C(LP) COUNTS UP.
		CAF	S2CON+MX
		TS	S2KEEP1
MPAGAIN		CS	S2KEEP1
		CS	A
		EXTEND
		MP	S2CON+MX
		AD	LP		# C(A) = 37777
		CS	A
		AD	S2CON+MX
		TC	-ZEROCHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CCS	S2KEEP1
		TS	S2KEEP1
		CCS	S2KEEP1
		TC	MPAGAIN
# (37777 THROUGH 00001) X (-1)
		CAF	S2CON+MX
		TS	S2KEEP1
MPHIGH2		CS	S2KEEP1
		CS	A
		EXTEND
		MP	S2CON-1
		AD	LP
		AD	S2KEEP1
		TC	-ZEROCHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CCS	S2KEEP1
		TS	S2KEEP1
		CCS	S2KEEP1
		TC	MPHIGH2
		TC	DV1

# THESE 2 CONSTANTS USED BY DIVIDE SUBROUTINES
DVCON1		OCTAL	37776
DVCON2		OCTAL	50001
# DIVIDE 1/4 BY 3/8
# ONCE THROUGH ALL DEVIDE SUBROUTINES TAKES APPROX. 0.012 SECONDS
# TOTAL TIME IN DEVIDE SUBROUTINES IS APPROX. 20 SECONDS
DV1		CAF	CONERAS2	# 01774
		TS	S2KEEP7
DV1++		CAF	S2CON3/8
		TS	Q
		CAF	S2CON1/4
		EXTEND
		DV	Q		# C(A) = 25252
		TS	S2KEEP1
		XCH	LP
		TS	S2KEEP2
DV1+-		CS	Q		# +1/4
		EXTEND
		DV	S2CN-3/8	# C(A) = 52525
		AD	S2KEEP1		# C(A) = -0
		TS	S2KEEP5
		XCH	LP
		TS	S2KEEP3
DV1--		XCH	Q		# -1/4
		EXTEND
		DV	S2CN-3/8
		TS	S2KEEP1
		XCH	LP
		TS	S2KEEP4
DV1-+		XCH	Q
		EXTEND
		DV	S2CON3/8
		AD	S2KEEP1		# C(A) = -0
		TS	S2KEEP1
		CS	LP		# C(A) = 37776
		AD	S2KEEP1		# C(A) = 37776
		AD	S2KEEP2		# C(A) = 37777
		AD	S2KEEP3		# C(A) = -0
		AD	S2KEEP4		# C(A) = +1
		AD	S2KEEP5		# C(A) = +1
		TC	-ONECHK -1

# DIVIDE INCREASING BIT POSITIONS BY 1/2  (13 DEVISIONS)
DV2		CAF	S2CON1
DV2LOOP		TS	S2KEEP2
		EXTEND
		DV	S2CON1/2
		TS	S2KEEP3
		AD	Q		# Q = -0
		TS	CYR
		CS	CYR
		AD	S2KEEP2
		AD	LP
		TC	-ONECHK -1
		CS	S2KEEP3
		AD	A
		TS	A		# OVERFLOW AT END OF DV2 SUBROUTINE
		TC	+2
		TC	DV3
		XCH	S2KEEP3
		AD	S2CON1
		TC	DV2LOOP

# DIVIDE SEPARATE DECREASING BIT POSITIONS BY 37777 (14DEVISIONS)
# AFTER C(A) = BEFORE C(A) AND AFTER C(Q) = -C(A)
DV3		CS	S2CON+MX
		TS	CYR		# C(CYR) = 20000
DV3LOOP		CS	CYR
		CS	A
		EXTEND
		DV	S2CON+MX
		TS	S2KEEP4
		AD	Q
		TC	-ZEROCHK
		CCS	S2KEEP4
		CCS	A
		TC	DV3LOOP

# DEVIDE 37776 BY 37776
# C(A) = +MAX FOR POSITIVE SIGN AND -MAX FOR NEGATIVE SIGN
# C(Q) = - ABSOLUTE VALUE OF DEVISOR = 40001
DV4++		CAF	DVCON1		# 37776
		EXTEND
		DV	DVCON1		# C(A) = 37777    C(Q) = -37776
		AD	Q
		TC	-ONECHK -1
		XCH	LP		# C(LP) = +1
		TS	S2KEEP5
		CS	DVCON1
		TS	S2KEEP4
DV4+-		CAF	DVCON1
		EXTEND
		DV	S2KEEP4		# C(A) = 40000  C(Q) = -37776
		CS	A
		AD	Q
		TC	-ONECHK -1
		AD	LP		# C(LP) = 40000
		AD	S2KEEP5
		TS	S2KEEP5		# -37776
DV4-+		CS	DVCON1
		EXTEND
		DV	DVCON1		# C(A) = 40000  C(Q) = -37776
		CS	A
		AD	Q
		TC	-ONECHK -1
		CS	LP		# C(LP) = 40001
		AD	S2KEEP5
		TS	S2KEEP5		# -0
DV4--		CS	DVCON1
		TS	S2KEEP4
		EXTEND
		DV	S2KEEP4		# C(A) = 37777  C(Q) = -37776
		AD	Q
		TC	-ONECHK -1
		CS	LP		# C(LP) = +1
		AD	S2KEEP5
		TC	-ONECHK
		CCS	NEWJOB
		TC	DUMEXIT2
		CCS	S2KEEP7
		TC	+2
		TC	SOPTION3 -3
		TS	S2KEEP7
		TC	DV1++		# BACK TO DEVIDE LOOP
		
		XCH	S2COUNT +2	# ADD +1 TO S2COUNT +2 REGISTER AT THIS
		AD	S2CON1		# POINT OF SELF-CHECK
		XCH	S2COUNT +2
SOPTION3	CCS	S2MODE
		TC	MPNMBRS		# STAY IN MPNMBRS LOOP
		TC	S2MODECK
		TC	S2MODECK	# SHOULD NOT COME HERE
		TC	S2MODECK	# END OF SELF-CHECK. START AGAIN
		
# COMPUTER ACTIVITY LIGHT (GREEN LIGHT) MAINTENANCE.

S2MODECK	CCS	NEWJOB		# SEE IF ITS TIME FOR A CHANGE.
		TC	DUMEXIT2
		
ADVAN2		CCS	S2MODE		# SEE IF SELF-CHECK IS WANTED
		TC	CCSCHK2		# YES PULSES ONLY
		TC	ENDOFJOB
		TC	CCSCHK2		# YES PULSES + SC + ERASABLE
		TC	CCSCHK2		# YES ALL OF SELF-CHECK
		
DUMEXIT2	XCH	Q
		TS	QADRS		# STORE RETURN ADDRESS
		CS	TWO		# TURN ON GREEN LIGHT (COMP ACT) AND
		INHINT
		MASK	OUT1		# GO TO CHANG1.
		AD	TWO
		TS	OUT1
		TC	CHANG1
		
DUMYJOB		CS	TWO		# IDLING AGAIN- TURN OFF ACTIVITY LIGHT
		INHINT
		MASK	OUT1		# LIGHT.
		TS	OUT1
		RELINT
		TC	QADRS		# BACK TO CHECKING COMPUTER
		
# C-RELAY TESTER

CCHK		CAF	BIT15
		TS	DSPTAB +11D
		TS	DSPTAB +12D
		TS	DSPTAB +13D
		
		CAF	BIT7
		INHINT
		TC	WAITLIST
		CADR	CCHKA
		CAF	LCCHKB
		TC	JOBSLEEP
		
CCHKA		CAF	LCCHKB
		TC	JOBWAKE
		TC	TASKOVER
		
CCHKB		CAF	TWO
		TS	MPAC
		
		CAF	TEN
CCHK0		TS	MPAC +1

		INDEX	A
		CAF	BIT11
		AD	BIT15
		INDEX	MPAC
		TS	DSPTAB +11D
		
		CAF	BIT8
		INHINT
		TC	WAITLIST
		CADR	CCHK1
		
		CAF	LCCHK2
		TC	JOBSLEEP
		
CCHK1		CAF	LCCHK2
		TC	JOBWAKE
		TC	TASKOVER
		
CCHK2		XCH	IN3
		CCS	IN3
		TC	CCHKALM
		TC	CCHKALM
		TC	+2
		TC	CCHKALM
		
		CCS	MPAC +1
		TC	CCHK0
		
		CAF	BIT15		# TURN OFF LAST RELAY.
		INDEX	MPAC
		TS	DSPTAB +11D
		
		CCS	MPAC
		TC	CCHK0 -2
		TC	GRABDSP
		TC	PREGBSY
		CAF	BIT7
		INHINT
		TC	WAITLIST
		CADR	CCHKC
		CAF	LCCHKD
		TC	JOBSLEEP
		
CCHKC		CAF	LCCHKD
		TC	JOBWAKE
		TC	TASKOVER
		
CCHKD		XCH	IN3
		CCS	IN3
		TC	+4
		TC	+3
		TC	CCHKALM
		TC	CCHKALM
		
		CAF	SEVEN
		TS	MPAC +2
		CAF	CCHKNV
		TC	NVSUB
		TC	PRENVBSY
TSTOUT		TC	FREEDSP
		TC	ENDOFJOB
		
CCHKALM		TC	ALARM
		OCT	1103
		TC	ENDOFJOB
		
LCCHKB		CADR	CCHKB
LCCHK2		CADR	CCHK2
CCHKNV		OCT	00101
LCCHKD		CADR	CCHKD


# DSKY TESTER

DCHECK		CAF	TEN
DC9		TS	MPAC
		INDEX	MPAC
		CAF	DSKYCODE
		TS	MPAC +1
		INHINT
		COM
		TS	DSPTAB +9D
		CS	MID5
		MASK	MPAC +1
		COM
		TS	DSPTAB +7
		CS	BIT11
		MASK	MPAC +1
		COM
		TS	DSPTAB
		TS	DSPTAB +1
		TS	DSPTAB +2
		TS	DSPTAB +3
		TS	DSPTAB +4
		TS	DSPTAB +5
		TS	DSPTAB +6
		TS	DSPTAB +8D
		TS	DSPTAB +10D
		CAF	DCNOUT
		TS	NOUT
DCWAIT		CAF	BIT11		# 10.24 SEC WAIT
		TC	WAITLIST
		CADR	DC10
		CAF	LDC11
		TC	JOBSLEEP
		
DC10		CAF	LDC11
		TC	JOBWAKE
		TC	TASKOVER
		
DC11		CCS	MPAC
		TC	DC9
		
		TC	+2
		TC	DC+
		
		INHINT
		CS	6K		# - SIGNS.
		TS	DSPTAB
		TS	DSPTAB +3
		TS	DSPTAB +5
		TS	MPAC
		CAF	THREE
		TS	NOUT
		TC	DCWAIT
		
DC+		INHINT
		CS	6K
		TS	DSPTAB +1
		TS	DSPTAB +4
		TS	DSPTAB +6
		CS	BIT12
		TS	DSPTAB
		TS	DSPTAB +3
		TS	DSPTAB +5
		CAF	SIX
		TS	NOUT
		CAF	LOW5
		TS	OUT1		# TURNS ON DSKY LAMPS.
		TC	ENDOFJOB
		
DSKYCODE	OCT	04000		# BLANKS
		OCT	07265		# 00
		OCT	06143		# 11
		OCT	07471		# 22
		OCT	07573		# 33
		OCT	06757		# 44
		OCT	07736		# 55
		OCT	07634		# 66
		OCT	07163		# 77
		OCT	07675		# 88
		OCT	07777		# 99
DCNOUT		DEC	11
LDC11		CADR	DC11
